@using ERP_StudentManagement.DTOs.Request
@using FluentValidation
@using MudBlazor
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;

@inject ISnackbar Snackbar



<MudContainer>
    

    <MudCard Class="my-custom-card">
        <MudCardContent>
            <MudForm Model="@model" @ref="@form"
                     Validation="@(studentValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.RegistrationNumber"
                                      Label="Registration Number"
                                      Required="true"
                                      For="@(()=>model.RegistrationNumber)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.FirstName"
                                      Label="First Name"
                                      Required="true"
                                      For="@(()=>model.FirstName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.LastName"
                                      Label="Last Name"
                                      Required="true"
                                      For="@(()=>model.LastName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Email"
                                      Label="Email"
                                      Required="true"
                                      For="@(()=>model.Email)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Phone"
                                      Label="Phone"
                                      Required="true"
                                      For="@(()=>model.Phone)" />
                    </MudItem>


                    <MudItem xs="12">
                        <MudSelect Label="Department" @bind-Value="@model.Department">
                            @foreach (var option in departmentlist)
                            {
                                <MudSelectItem Value="option">@option</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>


                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.District"
                                      Label="District" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.NationalId"
                                      Label="NationalID" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Address1"
                                      Label="Address1" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Address2"
                                      Label="Address2" />
                    </MudItem>

                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       OnClick="@(async () => await Submit())">Add</MudButton>
        </MudCardActions>

    </MudCard>
</MudContainer>

<style>
    .my-custom-card {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ced4da; /* Gray border */
    }
</style>






@code{

    [Parameter]
    public EventCallback onAdded { get; set; }
    private HttpClient Http = new HttpClient();

    private CreateStudentRequest model = new CreateStudentRequest();

    StudentModelValidator studentValidator = new StudentModelValidator();


    MudForm form;


    public class StudentModelValidator : AbstractValidator<CreateStudentRequest>

    {
        public StudentModelValidator()
        {
            RuleFor(x => x.RegistrationNumber)
               .NotEmpty().WithMessage("Registration Number is Required.")
               .Matches("^EG/.*$").WithMessage("Registration Number must start with 'EG/'");

            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("First Name is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("Last Name is Required.")
                .MinimumLength(3)
                .MaximumLength(20);


            RuleFor(x => x.Phone)
                .NotEmpty().WithMessage("Contact number is required.")
                .Matches("^[0-9]*$").WithMessage("Contact number can only contain numbers.");


            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

        }


        private async Task<bool> IsUniqueAsync(string email)
        {
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {

            var result = await ValidateAsync(ValidationContext<CreateStudentRequest>
                 .CreateWithOptions((CreateStudentRequest)model, x => x.IncludeProperties(propertyName)));

            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }


    private async Task Submit()
    {
        await form.Validate();
        try
        {
            if (form.IsValid)

            {

                var jsonModel = JsonSerializer.Serialize(model);
                var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("https://localhost:7055/api/StudentManagement", content);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync();
                    form.Reset();
                    Snackbar.Add("Student Added Successfully", MudBlazor.Severity.Success);
                }
                else
                {
                    Snackbar.Add("Please Check Your Connection.", MudBlazor.Severity.Error);
                }


            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }

    }

    private List<string> departmentlist = new List<string> { "Frist Year", "Computer Department", "Electrical Department", "Civil Department", "Mechanical Department", "Merain Engineering" };
    
}



